name: CI
on: [push, pull_request]
defaults:
  run:
    shell: bash
jobs:
  Verification:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Linux",
            os: ubuntu-latest
          }
        - {
            name: "Windows",
            os: windows-latest
          }
    steps:
      - name: Create the Projects directory
        run: mkdir Projects
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: Projects/${{ github.event.repository.name }}
      - name: Resolve the dependencies
        run: |
          cd Projects/${{ github.event.repository.name }}
          ./run.sh deps
      - name: Set up the project
        run: |
          cd Projects/${{ github.event.repository.name }}
          ./run.sh setup
      - name: Test the commit message checker
        if: runner.os == 'Linux'
        run: |
          cd Projects/${{ github.event.repository.name }}/tools/git/hooks
          ./test_commit-msg
      - name: Check the commit message
        # on pull_request, available commit message is not found by the tried command
        if: runner.os == 'Linux' && github.event_name != 'pull_request'
        run: |
          cd Projects/${{ github.event.repository.name }}/tools/git/hooks
          git log -1 --pretty=%B > ./commitMessage
          ./commit-msg ./commitMessage
          rm ./commitMessage
      - name: Build
        run: |
          cd Projects/${{ github.event.repository.name }}
          ./run.sh config
          ./run.sh build
      - name: Run the application and the tests
        run: |
          cd Projects/${{ github.event.repository.name }}
          ./run.sh run
          ./run.sh test
          cd ./build && ctest && cd -
      - name: Run Valgrind
        if: runner.os == 'Linux'
        run: |
          cd Projects/${{ github.event.repository.name }}
          sudo apt install valgrind
          ./run.sh setDeb
          ./run.sh config
          ./run.sh build
          ./run.sh valgrind
          ./run.sh setRel
      - name: Test coverage
        if: runner.os == 'Linux'
        run: |
          cd Projects/${{ github.event.repository.name }}
          sudo apt install lcov
          ./run.sh testCov
      #- name: Analyse the code
      #  run: |
      #    cd Projects/${{ github.event.repository.name }}
      #    ./run.sh analyseCode
      - name: Format the code
        run: |
          cd Projects/${{ github.event.repository.name }}
          ./run.sh formatCode
      - name: Create the document
        run: |
          cd Projects/${{ github.event.repository.name }}
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt install doxygen
            sudo apt install graphviz
          fi
          ./run.sh doc
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            Projects/${{ github.event.repository.name }}/build/Doc/html
            Projects/${{ github.event.repository.name }}/build/TestCov/CodeCoverage
          retention-days: 1
  UploadToGHpages:
    name: UploadToGHpages
    if: success() && github.ref == 'refs/heads/main'   # Upload only from main
    needs: [Verification]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    permissions:
      contents: write  # Add to push to a branch
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: gh-pages
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: .
      - name: Upload
        run: |
          git config user.email "githubaction@users.noreply.github.com"
          git config user.name "GitHub Action"
          rm -rf Doc CodeCoverage
          mv Projects/${{ github.event.repository.name }}/build/Doc/html Doc
          mv Projects/${{ github.event.repository.name }}/build/TestCov/CodeCoverage CodeCoverage
          git add Doc/ CodeCoverage/
          git commit --amend -m "Upload from ${{ github.sha }}" # Overwrite since the history is not needed for generated files
          git push --force